---
controls:
version: "cis-1.23"
id: 1
text: "Control Plane Security Configuration"
type: "master"
groups:
  - id: 1.1
    text: "Control Plane Node Configuration Files"
    checks:
      - id: 1.1.1
        text: "Ensure that the API server pod specification file permissions are set to 600 or more restrictive (Automated)"
        audit: "/bin/sh -c 'if test -e $apiserverconf; then stat -c permissions=%a $apiserverconf; fi'"
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "600"
        remediation: |
          In MicroK8s the control plane is not self-hosted and therefore it does not run in pods. 
          Instead the API server is a systemd service with its configuration found at /var/snap/microk8s/current/args/kube-apiserver. 
          The permissions of this file need to be set to 600 or more restrictive: 
          chmod 600 /var/snap/microk8s/current/args/kube-apiserver
        scored: true

      - id: 1.1.2
        text: "Ensure that the API server pod specification file ownership is set to root:root (Automated)"
        audit: "/bin/sh -c 'if test -e $apiserverconf; then stat -c %U:%G $apiserverconf; fi'"
        tests:
          test_items:
            - flag: "root:root"
        remediation: |
         In MicroK8s the control plane is not self-hosted and therefore it does not run in pods. 
         Instead the API server is a systemd service with its configuration found at /var/snap/microk8s/current/args/kube-apiserver. 
         The configuration file is owned by the user root and is editable by users in the microk8s (or snap_microk8s) group. To comply with the CIS recommendation:
         chown root:root /var/snap/microk8s/current/args/kube-apiserver
        scored: true

      - id: 1.1.3
        text: "Ensure that the controller manager pod specification file permissions are set to 600 or more restrictive (Automated)"
        audit: "/bin/sh -c 'if test -e $controllermanagerconf; then stat -c permissions=%a $controllermanagerconf; fi'"
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "600"
        remediation: |
          In MicroK8s the control plane is not self-hosted and therefore it does not run in pods. 
          Instead the controller manager is a systemd service with its configuration found at /var/snap/microk8s/current/args/kube-controller-manager. 
          The permissions of this file need to be set to 600 or more restrictive:
          chmod 600 /var/snap/microk8s/current/args/kube-controller-manager
        scored: true

      - id: 1.1.4
        text: "Ensure that the controller manager pod specification file ownership is set to root:root (Automated)"
        audit: "/bin/sh -c 'if test -e $controllermanagerconf; then stat -c %U:%G $controllermanagerconf; fi'"
        tests:
          test_items:
            - flag: "root:root"
        remediation: |
          In MicroK8s the control plane is not self-hosted and therefore it does not run in pods. 
          Instead the controller manager is a systemd service with its configuration found at /var/snap/microk8s/current/args/kube-controller-manager. 
          The configuration file is owned by the user root and is editable by users in the microk8s (or snap_microk8s) group. 
          To comply with the CIS recommendation:
          chown root:root /var/snap/microk8s/current/args/kube-controller-manager
        scored: true

      - id: 1.1.5
        text: "Ensure that the scheduler pod specification file permissions are set to 600 or more restrictive (Automated)"
        audit: "/bin/sh -c 'if test -e $schedulerconf; then stat -c permissions=%a $schedulerconf; fi'"
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "600"
        remediation: |
          In MicroK8s the control plane is not self-hosted and therefore it does not run in pods. 
          Instead the scheduler is a systemd service with its configuration found at /var/snap/microk8s/current/args/kube-scheduler. 
          The permissions of this file need to be set to 600 or more restrictive:
          chmod 600 /var/snap/microk8s/current/args/kube-scheduler
        scored: true

      - id: 1.1.6
        text: "Ensure that the scheduler pod specification file ownership is set to root:root (Automated)"
        audit: "/bin/sh -c 'if test -e $schedulerconf; then stat -c %U:%G $schedulerconf; fi'"
        tests:
          test_items:
            - flag: "root:root"
        remediation: |
          In MicroK8s the control plane is not self-hosted and therefore it does not run in pods. 
          Instead the controller manager is a systemd service with its configuration found at /var/snap/microk8s/current/args/kube-scheduler. 
          The configuration file is owned by the user root and is editable by users in the microk8s (or snap_microk8s) group. 
          To comply with the CIS recommendation:
          chown root:root /var/snap/microk8s/current/args/kube-scheduler
        scored: true

      - id: 1.1.7
        text: "Ensure that the etcd pod specification file permissions are set to 600 or more restrictive (Automated)"
        audit: "/bin/sh -c 'if test -e /var/snap/microk8s/current/args/k8s-dqlite; then stat -c permissions=%a /var/snap/microk8s/current/args/k8s-dqlite; fi'"
        use_multiple_values: true
        type: "skip"
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "600"
        remediation: |
          Not applicable. MicroK8s does not use etcd as its datastore it uses dqlite.
          Dqlite is a systemd service with its configuration found at /var/snap/microk8s/current/args/k8s-dqlite.
          To comply with the spirit of this CIS recommendation:
          chmod 600 /var/snap/microk8s/current/args/k8s-dqlite
        scored: true

      - id: 1.1.8
        text: "Ensure that the etcd pod specification file ownership is set to root:root (Automated)"
        audit: "/bin/sh -c 'if test -e /var/snap/microk8s/current/args/k8s-dqlite; then stat -c %U:%G /var/snap/microk8s/current/args/k8s-dqlite; fi'"
        use_multiple_values: true
        type: "skip"
        tests:
          test_items:
            - flag: "root:root"
        remediation: |
          Not applicable. MicroK8s does not use etcd as its datastore it uses dqlite.
          Dqlite is a systemd service with its configuration found at /var/snap/microk8s/current/args/k8s-dqlite.
          The configuration file is owned by the user root and is editable by users in the microk8s (or snap_microk8s) group.
          To comply with the spirit of this CIS recommendation:
          chown root:root /var/snap/microk8s/current/args/k8s-dqlite
        scored: true

      - id: 1.1.9
        text: "Ensure that the Container Network Interface file permissions are set to 600 or more restrictive (Manual)"
        audit: |
          find /var/snap/microk8s/current/args/cni-network/10-calico.conflist -type f 2> /dev/null | xargs --no-run-if-empty stat -c permissions=%a
        use_multiple_values: true
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "600"
        remediation: |
          In MicroK8s the CNI configuration files are stored by default under /var/snap/microk8s/current/args/cni-network/. 
          To comply with the CIS recommendation:
          chmod -R 600 /var/snap/microk8s/current/args/cni-network/
        scored: false

      - id: 1.1.10
        text: "Ensure that the Container Network Interface file ownership is set to root:root (Manual)"
        audit: |
          find /var/snap/microk8s/current/args/cni-network/10-calico.conflist -type f 2> /dev/null | xargs --no-run-if-empty stat -c %U:%G
        use_multiple_values: true
        tests:
          test_items:
            - flag: "root:root"
        remediation: |
          In MicroK8s the CNI configuration files are stored by default under /var/snap/microk8s/current/args/cni-network/. 
          To comply with the CIS recommendation:
          chown -R root:root /var/snap/microk8s/current/args/cni-network/
        scored: false

      - id: 1.1.11
        text: "Ensure that the etcd data directory permissions are set to 700 or more restrictive (Automated)"
        audit: "stat -c permissions=%a /var/snap/microk8s/current/var/kubernetes/backend/"
        type: "skip"
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "700"
        remediation: |
          Not applicable. MicroK8s uses dqlite as its datastore.
          Dqlite data are kept by default under /var/snap/microk8s/current/var/kubernetes/backend/.
          To comply with the spirit of this CIS recommendation:
          chmod -R 700 /var/snap/microk8s/current/var/kubernetes/backend/
        scored: true

      - id: 1.1.12
        text: "Ensure that the etcd data directory ownership is set to etcd:etcd (Automated)"
        audit: "stat -c %U:%G /var/snap/microk8s/current/var/kubernetes/backend/"
        type: "skip"
        tests:
          test_items:
            - flag: "etcd:etcd"
        remediation: |
          Not applicable. MicroK8s uses dqlite as its datastore owned by root.
          Dqlite data are kept by default under /var/snap/microk8s/current/var/kubernetes/backend/.
          To comply with the spirit of this CIS recommendation:
          chown -R root:root /var/snap/microk8s/current/var/kubernetes/backend/
        scored: true

      - id: 1.1.13
        text: "Ensure that the admin.conf file permissions are set to 600 or more restrictive (Automated)"
        audit: "/bin/sh -c 'if test -e /var/snap/microk8s/current/credentials/client.config; then stat -c permissions=%a /var/snap/microk8s/current/credentials/client.config; fi'"
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "600"
        remediation: |
          In MicroK8s the administration kubeconfig file is /var/snap/microk8s/current/credentials/client.config. 
          The permissions of this file need to be set to 600 or more restrictive:
          chmod 600 /var/snap/microk8s/current/credentials/client.config
        scored: true

      - id: 1.1.14
        text: "Ensure that the admin.conf file ownership is set to root:root (Automated)"
        audit: "/bin/sh -c 'if test -e /var/snap/microk8s/current/credentials/client.config; then stat -c %U:%G /var/snap/microk8s/current/credentials/client.config; fi'"
        tests:
          test_items:
            - flag: "root:root"
        remediation: |
          In MicroK8s the administration kubeconfig file is /var/snap/microk8s/current/credentials/client.config. 
          The ownership of this file need to be set to root:root:
          chown root:root /var/snap/microk8s/current/credentials/client.config
        scored: true

      - id: 1.1.15
        text: "Ensure that the scheduler.conf file permissions are set to 600 or more restrictive (Automated)"
        audit: "/bin/sh -c 'if test -e $schedulerkubeconfig; then stat -c permissions=%a $schedulerkubeconfig; fi'"
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "600"
        remediation: |
          In MicroK8s the scheduler kubeconfig file is /var/snap/microk8s/current/credentials/scheduler.config. 
          The permissions of this file need to be set to 600 or more restrictive:
          chmod 600 /var/snap/microk8s/current/credentials/scheduler.config
        scored: true

      - id: 1.1.16
        text: "Ensure that the scheduler.conf file ownership is set to root:root (Automated)"
        audit: "/bin/sh -c 'if test -e $schedulerkubeconfig; then stat -c %U:%G $schedulerkubeconfig; fi'"
        tests:
          test_items:
            - flag: "root:root"
        remediation: |
          In MicroK8s the scheduler kubeconfig file is /var/snap/microk8s/current/credentials/scheduler.config. 
          The ownership of this file need to be set to root:root:
          chown root:root /var/snap/microk8s/current/credentials/scheduler.config
        scored: true

      - id: 1.1.17
        text: "Ensure that the controller-manager.conf file permissions are set to 600 or more restrictive (Automated)"
        audit: "/bin/sh -c 'if test -e $controllermanagerkubeconfig; then stat -c permissions=%a $controllermanagerkubeconfig; fi'"
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "600"
        remediation: |
          In MicroK8s the controller manager kubeconfig file is /var/snap/microk8s/current/credentials/controller.config. 
          The permissions of this file need to be set to 600 or more restrictive:
          chmod 600 /var/snap/microk8s/current/credentials/controller.config
        scored: true

      - id: 1.1.18
        text: "Ensure that the controller-manager.conf file ownership is set to root:root (Automated)"
        audit: "/bin/sh -c 'if test -e $controllermanagerkubeconfig; then stat -c %U:%G $controllermanagerkubeconfig; fi'"
        tests:
          test_items:
            - flag: "root:root"
        remediation: |
          In MicroK8s the controller manager kubeconfig file is /var/snap/microk8s/current/credentials/controller.config. 
          The ownership of this file need to be set to root:root:
          chown root:root /var/snap/microk8s/current/credentials/controller.config
        scored: true

      - id: 1.1.19
        text: "Ensure that the Kubernetes PKI directory and file ownership is set to root:root (Automated)"
        audit: "find /var/snap/microk8s/current/certs/ | xargs stat -c %U:%G"
        use_multiple_values: true
        tests:
          test_items:
            - flag: "root:root"
        remediation: |
          In MicroK8s the certificates are stored under /var/snap/microk8s/current/certs/. 
          The ownership of this  directory and the included files need to be set to root:root:
          chown -R root:root /var/snap/microk8s/current/certs/
        scored: true

      - id: 1.1.20
        text: "Ensure that the Kubernetes PKI certificate file permissions are set to 600 or more restrictive (Manual)"
        audit: "find /var/snap/microk8s/current/certs/ -name '*.crt' | xargs stat -c permissions=%a"
        use_multiple_values: true
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "600"
        remediation: |
          In MicroK8s the certificates are stored under /var/snap/microk8s/current/certs/. 
          The permissions of this directory and the included files need to be set to 600 or more restrictive:
          chmod -R 600 /var/snap/microk8s/current/certs/
        scored: false

      - id: 1.1.21
        text: "Ensure that the Kubernetes PKI key file permissions are set to 600 (Manual)"
        audit: "find /var/snap/microk8s/current/certs/ -name '*.key' | xargs stat -c permissions=%a"
        use_multiple_values: true
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "600"
        remediation: |
          In MicroK8s the certificates are stored under /var/snap/microk8s/current/certs/. 
          The permissions of the keys included in the directory need to be set to 600 or more restrictive:
          chmod -R 600 /var/snap/microk8s/current/certs/
        scored: false

  - id: 1.2
    text: "API Server"
    checks:
      - id: 1.2.1
        text: "Ensure that the --anonymous-auth argument is set to false (Manual)"
        audit: "cat /var/snap/microk8s/current/args/kube-apiserver | grep anonymous-auth ; echo $?"
        tests:
          test_items:
            - flag: "--anonymous-auth"
              compare:
                op: eq
                value: false
        remediation: |
          In MicroK8s the API server arguments file is /var/snap/microk8s/current/args/kube-apiserver. Make sure --anonymous-auth is not present in this file.
        scored: false

      - id: 1.2.2
        text: "Ensure that the --token-auth-file parameter is not set (Automated)"
        audit: "cat /var/snap/microk8s/current/args/kube-apiserver | grep token-auth-file ; echo $?"
        tests:
          test_items:
            - flag: "--token-auth-file"
              set: false
        remediation: |
          Follow the documentation and configure alternate mechanisms for authentication. 
          Then, edit the API server arguments file /var/snap/microk8s/current/args/kube-apiserver on the control plane node 
          and remove the --token-auth-file= parameter. 
          For example, to switch to x509 certificate authentication as root first create certificates 
          for the admin, kubelet, kube-proxy, controller manager and kube-scheduler.
        scored: true

      - id: 1.2.3
        text: "Ensure that the --DenyServiceExternalIPs is not set (Automated)"
        audit: "cat /var/snap/microk8s/current/args/kube-apiserver | grep DenyServiceExternalIPs ; echo $?"
        tests:
          bin_op: or
          test_items:
            - flag: "--enable-admission-plugins"
              compare:
                op: nothave
                value: "DenyServiceExternalIPs"
            - flag: "--enable-admission-plugins"
              set: false
        remediation: |
          Edit the API server arguments file /var/snap/microk8s/current/args/kube-apiserver on the control plane node and 
          remove the DenyServiceExternalIPsfrom enabled admission plugins.
        scored: true

      - id: 1.2.4
        text: "Ensure that the --kubelet-client-certificate and --kubelet-client-key arguments are set as appropriate (Automated)"
        audit: "cat /var/snap/microk8s/current/args/kube-apiserver | grep kubelet-client-certificate && cat /var/snap/microk8s/current/args/kube-apiserver | grep  kubelet-client-key"
        tests:
          bin_op: and
          test_items:
            - flag: "--kubelet-client-certificate"
            - flag: "--kubelet-client-key"
        remediation: |
          Edit the API server arguments file /var/snap/microk8s/current/args/kube-apiserver on the control plane node 
          and set the two arguments appropriately:
          --kubelet-client-certificate=${SNAP_DATA}/certs/server.crt
          --kubelet-client-key=${SNAP_DATA}/certs/server.key
        scored: true

      - id: 1.2.5
        text: "Ensure that the --kubelet-certificate-authority argument is set as appropriate (Automated)"
        audit: "cat /var/snap/microk8s/current/args/kube-apiserver | grep kubelet-certificate-authority ; echo $?"
        tests:
          test_items:
            - flag: "--kubelet-certificate-authority"
        remediation: |
          Edit the API server arguments file /var/snap/microk8s/current/args/kube-apiserver on the control plane node and set:
          --kubelet-certificate-authority=${SNAP_DATA}/certs/ca.crt
        scored: true

      - id: 1.2.6
        text: "Ensure that the --authorization-mode argument is not set to AlwaysAllow (Automated)"
        audit: "grep -e 'authorization-mode.*AlwaysAllow' /var/snap/microk8s/current/args/kube-apiserver ; echo $?"
        tests:
          bin_op: or
          test_items:
            - flag: "--authorization-mode"
              compare:
                op: nothave
                value: "AlwaysAllow"
            - flag: "--authorization-mode"
              set: false
        remediation: |
          Enable RBAC by calling:
          microk8s enable rbac
        scored: true

      - id: 1.2.7
        text: "Ensure that the --authorization-mode argument includes Node (Automated)"
        audit: "cat /var/snap/microk8s/current/args/kube-apiserver | grep -e 'authorization-mode.*Node' ; echo $?"
        tests:
          test_items:
            - flag: "--authorization-mode"
              compare:
                op: has
                value: "Node"
        remediation: |
          Enable RBAC by calling:
          microk8s enable rbac
        scored: true

      - id: 1.2.8
        text: "Ensure that the --authorization-mode argument includes RBAC (Automated)"
        audit: "cat /var/snap/microk8s/current/args/kube-apiserver | grep -e 'authorization-mode.*RBAC' ; echo $?"
        tests:
          test_items:
            - flag: "--authorization-mode"
              compare:
                op: has
                value: "RBAC"
        remediation: |
          Enable RBAC by calling:
          microk8s enable rbac
        scored: true

      - id: 1.2.9
        text: "Ensure that the admission control plugin EventRateLimit is set (Manual)"
        audit: "cat /var/snap/microk8s/current/args/kube-apiserver | grep EventRateLimit && cat /var/snap/microk8s/current/args/kube-apiserver | grep  admission-control-config-file ; echo $?"
        tests:
          test_items:
            - flag: "--enable-admission-plugins"
              compare:
                op: has
                value: "EventRateLimit"
        remediation: |
         Follow the Kubernetes documentation and set the desired event rate limits in a configuration file.
        scored: true

      - id: 1.2.10
        text: "Ensure that the admission control plugin AlwaysAdmit is not set (Automated)"
        audit: "grep -e '--enable-admission-plugins.*AlwaysAdmit.*' /var/snap/microk8s/current/args/kube-apiserver ; echo $?"
        tests:
          bin_op: or
          test_items:
            - flag: "--enable-admission-plugins"
              compare:
                op: nothave
                value: AlwaysAdmit
            - flag: "--enable-admission-plugins"
              set: false
        remediation: |
          Follow the Kubernetes documentation and set the --enable-admission-plugins in /var/snap/microk8s/current/args/kube-apiserver to a value that does not include AlwaysAdmit.
        scored: false

      - id: 1.2.11
        text: "Ensure that the admission control plugin AlwaysPullImages is set (Manual)"
        audit: "grep -e '--enable-admission-plugins.*AlwaysPullImages.*' /var/snap/microk8s/current/args/kube-apiserver ; echo $?"
        tests:
          test_items:
            - flag: "--enable-admission-plugins"
              compare:
                op: has
                value: "AlwaysPullImages"
        remediation: |
          Edit `/var/snap/microk8s/current/args/kube-apiserver` to include `AlwaysPullImages` in the `-–enable-admission-plugins`.
        scored: true

      - id: 1.2.12
        text: "Ensure that the admission control plugin SecurityContextDeny is set if PodSecurityPolicy is not used (Manual)"
        audit: |
          grep 'SecurityContextDeny\|PodSecurityPolicy' /var/snap/microk8s/current/args/kube-apiserver ; echo $?
        type: "skip"
        tests:
          bin_op: or
          test_items:
            - flag: "--enable-admission-plugins"
              compare:
                op: has
                value: "SecurityContextDeny"
            - flag: "--enable-admission-plugins"
              compare:
                op: has
                value: "PodSecurityPolicy"
        remediation: |
          Not applicable. Both PodSecurityPolicy and SecurityContextDeny have been deprecated.
        scored: false

      - id: 1.2.13
        text: "Ensure that the admission control plugin ServiceAccount is set (Automated)"
        audit: "grep -e 'disable-admission-plugins.*ServiceAccount.*' /var/snap/microk8s/current/args/kube-apiserver ; echo $?"
        tests:
          bin_op: or
          test_items:
            - flag: "--disable-admission-plugins"
              compare:
                op: nothave
                value: "ServiceAccount"
            - flag: "--disable-admission-plugins"
              set: false
        remediation: |
          Edit the API server arguments file /var/snap/microk8s/current/args/kube-apiserver 
          and ensure that the --disable-admission-plugins parameter is set to a value that does not include ServiceAccount.
        scored: false

      - id: 1.2.14
        text: "Ensure that the admission control plugin NamespaceLifecycle is set (Automated)"
        audit: "grep -e 'disable-admission-plugins.*NamespaceLifecycle.*' /var/snap/microk8s/current/args/kube-apiserver ; echo $?"
        tests:
          bin_op: or
          test_items:
            - flag: "--disable-admission-plugins"
              compare:
                op: nothave
                value: "NamespaceLifecycle"
            - flag: "--disable-admission-plugins"
              set: false
        remediation: |
          Edit the API server arguments file /var/snap/microk8s/current/args/kube-apiserver 
          and ensure that the --disable-admission-plugins parameter is set to a value that does not include NamespaceLifecycle.
        scored: true

      - id: 1.2.15
        text: "Ensure that the admission control plugin NodeRestriction is set (Automated)"
        audit: "grep -e 'enable-admission-plugins.*NodeRestriction.*' /var/snap/microk8s/current/args/kube-apiserver ; echo $?"
        tests:
          test_items:
            - flag: "--enable-admission-plugins"
              compare:
                op: has
                value: "NodeRestriction"
        remediation: |
          Follow the Kubernetes documentation and configure NodeRestriction plug-in on kubelets. 
          Edit the API server arguments file /var/snap/microk8s/current/args/kube-apiserver on the control plane node 
          and set the --enable-admission-plugins parameter to a value that includes NodeRestriction:
          --enable-admission-plugins=...,NodeRestriction,...
        scored: true

      - id: 1.2.16
        text: "Ensure that the --secure-port argument is not set to 0 (Automated)"
        audit: "grep -e 'secure-port' /var/snap/microk8s/current/args/kube-apiserver ; echo $?"
        tests:
          bin_op: or
          test_items:
            - flag: "--secure-port"
              compare:
                op: gt
                value: 0
            - flag: "--secure-port"
              set: false
        remediation: |
          Follow the Kubernetes documentation and configure NodeRestriction plug-in on kubelets. 
          Edit the API server arguments file /var/snap/microk8s/current/args/kube-apiserver 
          and either remove the --secure-port parameter or set it to a different (non-zero) desired port.
        scored: true

      - id: 1.2.17
        text: "Ensure that the --profiling argument is set to false (Automated)"
        audit: "grep -e '--profiling' /var/snap/microk8s/current/args/kube-apiserver ; echo $?"
        tests:
          test_items:
            - flag: "--profiling"
              compare:
                op: eq
                value: false
        remediation: |
          Follow the Kubernetes documentation and configure the below parameter:
          --profiling=false
        scored: true

      - id: 1.2.18
        text: "Ensure that the --audit-log-path argument is set (Automated)"
        audit: "grep -e '--audit-log-path' /var/snap/microk8s/current/args/kube-apiserver ; echo $?"
        tests:
          test_items:
            - flag: "--audit-log-path"
        remediation: |
          Edit the API server arguments file /var/snap/microk8s/current/args/kube-apiserver on the control plane node 
          and set the --audit-log-path parameter to a suitable path and file where you would like audit logs to be written, for example:
          --audit-log-path=/var/log/apiserver/audit.log
        scored: true

      - id: 1.2.19
        text: "Ensure that the --audit-log-maxage argument is set to 30 or as appropriate (Automated)"
        audit: "grep -e '--audit-log-maxage' /var/snap/microk8s/current/args/kube-apiserver ; echo $?"
        tests:
          test_items:
            - flag: "--audit-log-maxage"
              compare:
                op: gte
                value: 30
        remediation: |
          Edit the API server arguments file /var/snap/microk8s/current/args/kube-apiserver on the control plane node 
          and set the --audit-log-maxage parameter to 30 or as an appropriate number of days, for example:
          --audit-log-maxage=30
        scored: true

      - id: 1.2.20
        text: "Ensure that the --audit-log-maxbackup argument is set to 10 or as appropriate (Automated)"
        audit: "grep -e '--audit-log-maxbackup' /var/snap/microk8s/current/args/kube-apiserver ; echo $?"
        tests:
          test_items:
            - flag: "--audit-log-maxbackup"
              compare:
                op: gte
                value: 10
        remediation: |
          Edit the API server arguments file /var/snap/microk8s/current/args/kube-apiserver on the control plane node 
          and set the --audit-log-maxbackup parameter to 10 or to an appropriate value, for example:
          --audit-log-maxbackup=10
        scored: true

      - id: 1.2.21
        text: "Ensure that the --audit-log-maxsize argument is set to 100 or as appropriate (Automated)"
        audit: "grep -e '--audit-log-maxsize' /var/snap/microk8s/current/args/kube-apiserver ; echo $?"
        tests:
          test_items:
            - flag: "--audit-log-maxsize"
              compare:
                op: gte
                value: 100
        remediation: |
          Edit the API server arguments file /var/snap/microk8s/current/args/kube-apiserver on the control plane node 
          and set the --audit-log-maxsize argument parameter to 100 or to an appropriate value, for example:
          --audit-log-maxsize argument=100
        scored: true

      - id: 1.2.22
        text: "Ensure that the --request-timeout argument is set as appropriate (Manual)"
        audit: "grep -e '--request-timeout' /var/snap/microk8s/current/args/kube-apiserver ; echo $?"
        tests:
          test_items:
            - flag: "--request-timeout"
        remediation: |
          Edit the API server arguments file /var/snap/microk8s/current/args/kube-apiserver
          and set the below parameter as appropriate and if needed, for example:
          --request-timeout=300s
        scored: true

      - id: 1.2.23
        text: "Ensure that the --service-account-lookup argument is set to true (Automated)"
        audit: "grep -e '--service-account-lookup' /var/snap/microk8s/current/args/kube-apiserver ; echo $?"
        tests:
          bin_op: or
          test_items:
            - flag: "--service-account-lookup"
              set: false
            - flag: "--service-account-lookup"
              compare:
                op: eq
                value: true
        remediation: |
          Edit the API server arguments file /var/snap/microk8s/current/args/kube-apiserver on the control plane node and set the below parameter.
          --service-account-lookup=true
        scored: false

      - id: 1.2.24
        text: "Ensure that the --service-account-key-file argument is set as appropriate (Automated)"
        audit: "grep -e '--service-account-key-file' /var/snap/microk8s/current/args/kube-apiserver ; echo $?"
        tests:
          test_items:
            - flag: "--service-account-key-file"
        remediation: |
          Edit the API server arguments file /var/snap/microk8s/current/args/kube-apiserver on the control plane node 
          and set the --service-account-key-file parameter to the public key file for service accounts. For example,
          --service-account-key-file=${SNAP_DATA}/certs/serviceaccount.key
        scored: true

      - id: 1.2.25
        text: "Ensure that the --etcd-certfile and --etcd-keyfile arguments are set as appropriate (Automated)"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        type: "skip"
        tests:
          bin_op: and
          test_items:
            - flag: "--etcd-certfile"
            - flag: "--etcd-keyfile"
        remediation: |
          Not applicable. MicroK8s used dqlite and the communication to this service is done 
          through a local socket (/var/snap/microk8s/current/var/kubernetes/backend/kine.sock:12379) accessible to users with root permissions.
        scored: true

      - id: 1.2.26
        text: "Ensure that the --tls-cert-file and --tls-private-key-file arguments are set as appropriate (Automated)"
        audit: |
          grep -e '--tls-cert-file\|--tls-private-key-file' /var/snap/microk8s/current/args/kube-apiserver  ; echo $?
        tests:
          bin_op: and
          test_items:
            - flag: "--tls-cert-file"
            - flag: "--tls-private-key-file"
        remediation: |
          Follow the Kubernetes documentation and set up the TLS connection on the apiserver.
          Then, edit the API server pod specification file /var/snap/microk8s/current/args/kube-apiserver on the control plane node 
          and set the TLS certificate and private key file parameters.
          --tls-cert-file=${SNAP_DATA}/certs/server.crt
          --tls-private-key-file=${SNAP_DATA}/certs/server.key
        scored: true

      - id: 1.2.27
        text: "Ensure that the --client-ca-file argument is set as appropriate (Automated)"
        audit: "grep -e '--client-ca-file' /var/snap/microk8s/current/args/kube-apiserver"
        tests:
          test_items:
            - flag: "--client-ca-file"
        remediation: |
          Follow the Kubernetes documentation and set up the TLS connection on the apiserver. 
          Then, edit the API server pod specification file /var/snap/microk8s/current/args/kube-apiserver on the control plane node 
          and set the client certificate authority file:
          --client-ca-file=${SNAP_DATA}/certs/ca.crt
        scored: true

      - id: 1.2.28
        text: "Ensure that the --etcd-cafile argument is set as appropriate (Automated)"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        type: "skip"
        tests:
          test_items:
            - flag: "--client-ca-file"
        remediation: |
          Not applicable. MicroK8s used dqlite and the communication to this service is done 
          through a local socket (/var/snap/microk8s/current/var/kubernetes/backend/kine.sock:12379) accessible to users with root permissions.
        scored: true

      - id: 1.2.29
        text: "Ensure that the --encryption-provider-config argument is set as appropriate (Manual)"
        audit: "grep -e '--encryption-provider-config' /var/snap/microk8s/current/args/kube-apiserver"
        tests:
          test_items:
            - flag: "--encryption-provider-config"
        remediation: |
          Follow the Kubernetes documentation and configure a EncryptionConfig file.
          Then, edit the API server pod specification file /var/snap/microk8s/current/args/kube-apiserver on the control plane node 
          and set the --encryption-provider-config parameter to the path of that file. For example,
          --encryption-provider-config=</path/to/EncryptionConfig/File>
        scored: true

      - id: 1.2.30
        text: "Ensure that encryption providers are appropriately configured (Manual)"
        audit: |
          grep -e 'aescbc\|kms\|secretbox' /path/to/encryption/providers/file ; echo $?
        tests:
          test_items:
            - flag: "provider"
              compare:
                op: valid_elements
                value: "aescbc,kms,secretbox"
        remediation: |
          Follow the Kubernetes documentation and configure a EncryptionConfig file.
          In this file, choose aescbc, kms or secretbox as the encryption provider.
        scored: false

      - id: 1.2.31
        text: "Ensure that the API Server only makes use of Strong Cryptographic Ciphers (Manual)"
        audit: |
          grep -e '--tls-cipher-suites' /var/snap/microk8s/current/args/kube-apiserver
        tests:
          test_items:
            - flag: "--tls-cipher-suites"
              compare:
                op: valid_elements
                value: "TLS_AES_128_GCM_SHA256,TLS_AES_256_GCM_SHA384,TLS_CHACHA20_POLY1305_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256,TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256,TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_256_GCM_SHA384"
        remediation: |
          Edit the API server arguments file /var/snap/microk8s/current/args/kube-apiserver on the control plane node and set the below parameter.
          --tls-cipher-suites=TLS_AES_128_GCM_SHA256,TLS_AES_256_GCM_SHA384,TLS_CHACHA20_POLY1305_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,
          TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,
          TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256,TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,
          TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256,
          TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_256_GCM_SHA384
        scored: false

  - id: 1.3
    text: "Controller Manager"
    checks:
      - id: 1.3.1
        text: "Ensure that the --terminated-pod-gc-threshold argument is set as appropriate (Manual)"
        audit: "grep -e '--terminated-pod-gc-threshold' /var/snap/microk8s/current/args/kube-controller-manager"
        tests:
          test_items:
            - flag: "--terminated-pod-gc-threshold"
        remediation: |
          Edit the Controller Manager arguments file /var/snap/microk8s/current/args/kube-controller-manager on the control plane node 
          and set the --terminated-pod-gc-threshold to an appropriate threshold,
          for example:
          --terminated-pod-gc-threshold=10
        scored: false

      - id: 1.3.2
        text: "Ensure that the --profiling argument is set to false (Automated)"
        audit: "grep -e '--profiling' /var/snap/microk8s/current/args/kube-controller-manager"
        tests:
          test_items:
            - flag: "--profiling"
              compare:
                op: eq
                value: false
        remediation: |
          Edit the Controller Manager arguments file /var/snap/microk8s/current/args/kube-controller-manager  to configure the below parameter:
          --profiling=false
        scored: true

      - id: 1.3.3
        text: "Ensure that the --use-service-account-credentials argument is set to true (Automated)"
        audit: "grep -e '--use-service-account-credentials' /var/snap/microk8s/current/args/kube-controller-manager"
        tests:
          test_items:
            - flag: "--use-service-account-credentials"
              compare:
                op: noteq
                value: false
        remediation: |
          Edit the Controller Manager arguments file /var/snap/microk8s/current/args/kube-controller-manager and set the below parameter:
          --use-service-account-credentials=true
        scored: true

      - id: 1.3.4
        text: "Ensure that the --service-account-private-key-file argument is set as appropriate (Automated)"
        audit: "grep -e '--service-account-private-key-file' /var/snap/microk8s/current/args/kube-controller-manager"
        tests:
          test_items:
            - flag: "--service-account-private-key-file"
        remediation: |
          Edit the Controller Manager arguments file /var/snap/microk8s/current/args/kube-controller-manager and set the below parameter:
          --service-account-private-key-file=${SNAP_DATA}/certs/serviceaccount.key
        scored: true

      - id: 1.3.5
        text: "Ensure that the --root-ca-file argument is set as appropriate (Automated)"
        audit: "grep -e '--root-ca-file' /var/snap/microk8s/current/args/kube-controller-manager"
        tests:
          test_items:
            - flag: "--root-ca-file"
        remediation: |
          Edit the Controller Manager arguments file /var/snap/microk8s/current/args/kube-controller-manager 
          and set the --root-ca-file parameter to the certificate bundle file:
          --root-ca-file=${SNAP_DATA}/certs/ca.crt
        scored: true

      - id: 1.3.6
        text: "Ensure that the RotateKubeletServerCertificate argument is set to true (Automated)"
        audit: "grep -e '--feature-gates' /var/snap/microk8s/current/args/kube-controller-manager ; echo $?"
        tests:
          bin_op: or
          test_items:
            - flag: "--feature-gates"
              compare:
                op: nothave
                value: "RotateKubeletServerCertificate=false"
              set: true
            - flag: "--feature-gates"
              set: false
        remediation: |
          Edit the Controller Manager arguments file /var/snap/microk8s/current/args/kube-controller-manager
          and set the --feature-gates parameter to include RotateKubeletServerCertificate=true.
          --feature-gates=RotateKubeletServerCertificate=true
        scored: true

      - id: 1.3.7
        text: "Ensure that the --bind-address argument is set to 127.0.0.1 (Automated)"
        audit: "grep -e '--bind-address' /var/snap/microk8s/current/args/kube-controller-manager ; echo $?"
        tests:
          bin_op: or
          test_items:
            - flag: "--bind-address"
              compare:
                op: eq
                value: "127.0.0.1"
            - flag: "--bind-address"
              set: false
        remediation: |
          Edit the Controller Manager arguments file /var/snap/microk8s/current/args/kube-controller-manager
          and ensure the correct value for the --bind-address parameter.
        scored: true

  - id: 1.4
    text: "Scheduler"
    checks:
      - id: 1.4.1
        text: "Ensure that the --profiling argument is set to false (Automated)"
        audit: "grep -e '--profiling' /var/snap/microk8s/current/args/kube-scheduler"
        tests:
          test_items:
            - flag: "--profiling"
              compare:
                op: eq
                value: false
        remediation: |
          Edit the Controller Manager arguments file /var/snap/microk8s/current/args/kube-scheduler to configure the below parameter:
          --profiling=false
        scored: true

      - id: 1.4.2
        text: "Ensure that the --bind-address argument is set to 127.0.0.1 (Automated)"
        audit: "grep -e '--bind-address' /var/snap/microk8s/current/args/kube-scheduler ; echo $?"
        tests:
          bin_op: or
          test_items:
            - flag: "--bind-address"
              compare:
                op: eq
                value: "127.0.0.1"
            - flag: "--bind-address"
              set: false
        remediation: |
          Edit the Controller Manager arguments file /var/snap/microk8s/current/args/kube-scheduler
          and ensure the correct value for the --bind-address parameter.
        scored: true
