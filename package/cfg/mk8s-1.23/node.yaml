---
controls:
version: "cis-1.23"
id: 4
text: "Worker Node Security Configuration"
type: "node"
groups:
  - id: 4.1
    text: "Worker Node Configuration Files"
    checks:
      - id: 4.1.1
        text: "Ensure that the kubelet service file permissions are set to 600 or more restrictive (Automated)"
        audit: "/bin/sh -c 'if test -e /etc/systemd/system/snap.microk8s.daemon-kubelite.service; then stat -c permissions=%a /etc/systemd/system/snap.microk8s.daemon-kubelite.service; fi'"
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "600"
        remediation: |
          kubelet starts as part of the snap.microk8s.daemon-kubelite.service systemd service. 
          Run the below command (based on the file location on your system) on the each worker node.
          chmod 600 /etc/systemd/system/snap.microk8s.daemon-kubelite.service
        scored: true

      - id: 4.1.2
        text: "Ensure that the kubelet service file ownership is set to root:root (Automated)"
        audit: "/bin/sh -c 'if test -e /etc/systemd/system/snap.microk8s.daemon-kubelite.service; then stat -c %U:%G /etc/systemd/system/snap.microk8s.daemon-kubelite.service; fi'"
        tests:
          test_items:
            - flag: root:root
        remediation: |
          kubelet starts as part of the snap.microk8s.daemon-kubelite.service systemd service. 
          Run the below command (based on the file location on your system) on the each worker node.
          chown root:root /etc/systemd/system/snap.microk8s.daemon-kubelite.service
        scored: true

      - id: 4.1.3
        text: "If proxy kubeconfig file exists ensure permissions are set to 600 or more restrictive (Manual)"
        audit: "/bin/sh -c 'if test -e /var/snap/microk8s/current/credentials/proxy.config; then stat -c permissions=%a /var/snap/microk8s/current/credentials/proxy.config; fi'"
        tests:
          bin_op: or
          test_items:
            - flag: "permissions"
              set: true
              compare:
                op: bitmask
                value: "600"
            - flag: "$proxykubeconfig"
              set: false
        remediation: |
          Run the below command (based on the file location on your system) on the each worker node.
          chmod 600 /var/snap/microk8s/current/credentials/proxy.config
        scored: false

      - id: 4.1.4
        text: "If proxy kubeconfig file exists ensure ownership is set to root:root (Manual)"
        audit: "/bin/sh -c 'if test -e /var/snap/microk8s/current/credentials/proxy.config; then stat -c %U:%G /var/snap/microk8s/current/credentials/proxy.config; fi'"
        tests:
          bin_op: or
          test_items:
            - flag: root:root
            - flag: "$proxykubeconfig"
              set: false
        remediation: |
          Run the below command (based on the file location on your system) on the each worker node.
          chown root:root /var/snap/microk8s/current/credentials/proxy.config
        scored: false

      - id: 4.1.5
        text: "Ensure that the --kubeconfig kubelet.conf file permissions are set to 600 or more restrictive (Automated)"
        audit: "/bin/sh -c 'if test -e /var/snap/microk8s/current/credentials/kubelet.config; then stat -c permissions=%a /var/snap/microk8s/current/credentials/kubelet.config; fi'"
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "600"
        remediation: |
          Run the below command (based on the file location on your system) on the each worker node.
          chmod 600 /var/snap/microk8s/current/credentials/kubelet.config
        scored: true

      - id: 4.1.6
        text: "Ensure that the --kubeconfig kubelet.conf file ownership is set to root:root (Automated)"
        audit: "/bin/sh -c 'if test -e /var/snap/microk8s/current/credentials/kubelet.config; then stat -c %U:%G /var/snap/microk8s/current/credentials/kubelet.config; fi'"
        tests:
          test_items:
            - flag: root:root
        remediation: |
          Run the below command (based on the file location on your system) on the each worker node.
          chown root:root /var/snap/microk8s/current/credentials/kubelet.config
        scored: true

      - id: 4.1.7
        text: "Ensure that the certificate authorities file permissions are set to 600 or more restrictive (Manual)"
        audit: |
          stat -c permissions=%a /var/snap/microk8s/current/certs/ca.crt
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "600"
        remediation: |
          Run the following command to modify the file permissions of the --client-ca-file
          chmod 600 /var/snap/microk8s/current/certs/ca.crt
        scored: false

      - id: 4.1.8
        text: "Ensure that the client certificate authorities file ownership is set to root:root (Manual)"
        audit: |
          stat -c %U:%G  /var/snap/microk8s/current/certs/ca.crt
        tests:
          test_items:
            - flag: root:root
              compare:
                op: eq
                value: root:root
        remediation: |
          Run the following command to modify the ownership of the --client-ca-file.
          chown root:root /var/snap/microk8s/current/certs/ca.crt
        scored: false

      - id: 4.1.9
        text: "If the kubelet config.yaml configuration file is being used validate permissions set to 600 or more restrictive (Manual)"
        type: "skip"
        remediation: |
          Not applicable. MicroK8s does not use a config.yaml configuration file.
        scored: true

      - id: 4.1.10
        text: "If the kubelet config.yaml configuration file is being used validate file ownership is set to root:root (Manual)"
        type: "skip"
        remediation: |
          Not applicable. MicroK8s does not use a config.yaml configuration file.
        scored: true

  - id: 4.2
    text: "Kubelet"
    checks:
      - id: 4.2.1
        text: "Ensure that the --anonymous-auth argument is set to false (Manual)"
        audit: "grep -e '--anonymous-auth' /var/snap/microk8s/current/args/kubelet ; echo $?"
        tests:
          test_items:
            - flag: "--anonymous-auth"
              compare:
                op: eq
                value: false
        remediation: |
          In MicroK8s the API server arguments file is /var/snap/microk8s/current/args/kubelet.
          Make sure --anonymous-auth is not present in the file or set to false.
        scored: true

      - id: 4.2.2
        text: "Ensure that the --authorization-mode argument is not set to AlwaysAllow (Automated)"
        audit: "grep -e '--authorization-mode' /var/snap/microk8s/current/args/kubelet ; echo $?"
        tests:
          bin_op: or
          test_items:
            - flag: "--authorization-mode"
              compare:
                op: nothave
                value: AlwaysAllow
            - flag: "--authorization-mode"
              set: false
        remediation: |
          Edit the kubelet service arguments file /var/snap/microk8s/current/args/kubelet and set the parameter:
          --authorization-mode=Webhook
        scored: true

      - id: 4.2.3
        text: "Ensure that the --client-ca-file argument is set as appropriate (Automated)"
        audit: "grep -e '--client-ca-file' /var/snap/microk8s/current/args/kubelet ; echo $?"
        tests:
          test_items:
            - flag: --client-ca-file
              path: '{.authentication.x509.clientCAFile}'
        remediation: |
          Edit the kubelet service arguments file /var/snap/microk8s/current/args/kubelet and set the parameter:
          --client-ca-file=${SNAP_DATA}/certs/ca.crt
        scored: true

      - id: 4.2.4
        text: "Verify that the --read-only-port argument is set to 0 (Manual)"
        audit: "grep -e '--read-only-port' /var/snap/microk8s/current/args/kubelet ; echo $?"
        tests:
          bin_op: or
          test_items:
            - flag: "--read-only-port"
              path: '{.readOnlyPort}'
              compare:
                op: eq
                value: 0
            - flag: "--read-only-port"
              path: '{.readOnlyPort}'
              set: false
        remediation: |
          Edit the kubelet service arguments file /var/snap/microk8s/current/args/kubelet and set the parameter:
          --read-only-port=0
          or remove it.
        scored: false

      - id: 4.2.5
        text: "Ensure that the --streaming-connection-idle-timeout argument is not set to 0 (Manual)"
        audit: "grep -e '--streaming-connection-idle-timeout' /var/snap/microk8s/current/args/kubelet ; echo $?"
        tests:
          test_items:
            - flag: --streaming-connection-idle-timeout
              path: '{.streamingConnectionIdleTimeout}'
              compare:
                op: noteq
                value: 0
            - flag: --streaming-connection-idle-timeout
              path: '{.streamingConnectionIdleTimeout}'
              set: false
          bin_op: or
        remediation: |
          Edit the kubelet service arguments file /var/snap/microk8s/current/args/kubelet and remove the parameter --streaming-connection-idle-timeout.
        scored: false

      - id: 4.2.6
        text: "Ensure that the --protect-kernel-defaults argument is set to true (Automated)"
        audit: "grep -e '--protect-kernel-defaults' /var/snap/microk8s/current/args/kubelet ; echo $?"
        audit_config: "/bin/cat $kubeletconf"
        tests:
          test_items:
            - flag: --protect-kernel-defaults
              compare:
                op: eq
                value: true
        remediation: |
          Edit the kubelet service arguments file /var/snap/microk8s/current/args/kubelet and set the parameter:
          --protect-kernel-defaults=true
          Mind you may need set in /etc/sysctl.conf:
          vm.overcommit_memory = 1
          kernel.panic = 10
        scored: true

      - id: 4.2.7
        text: "Ensure that the --make-iptables-util-chains argument is set to true (Automated)"
        audit: "grep -e '--make-iptables-util-chains' /var/snap/microk8s/current/args/kubelet ; echo $?"
        tests:
          test_items:
            - flag: --make-iptables-util-chains
              path: '{.makeIPTablesUtilChains}'
              compare:
                op: eq
                value: true
            - flag: --make-iptables-util-chains
              path: '{.makeIPTablesUtilChains}'
              set: false
          bin_op: or
        remediation: |
          Edit the kubelet service arguments file /var/snap/microk8s/current/args/kubelet and remove the parameter --make-iptables-util-chains.
        scored: true

      - id: 4.2.8
        text: "Ensure that the --hostname-override argument is not set (Manual)"
        # This is one of those properties that can only be set as a command line argument.
        # To check if the property is set as expected, we need to parse the kubelet command
        # instead reading the Kubelet Configuration file.
        audit: "grep -e '--hostname-override' /var/snap/microk8s/current/args/kubelet ; echo $?"
        tests:
          test_items:
            - flag: --hostname-override
              set: false
        remediation: |
          Edit the kubelet service arguments file /var/snap/microk8s/current/args/kubelet and remove the parameter --hostname-override.
        scored: false

      - id: 4.2.9
        text: "Ensure that the eventRecordQPS argument is set to a level which ensures appropriate event capture (Manual)"
        audit: "grep -e '--event-qps' /var/snap/microk8s/current/args/kubelet ; echo $?"
        tests:
          test_items:
            - flag: --event-qps
              path: '{.eventRecordQPS}'
              compare:
                op: eq
                value: 0
        remediation: |
          Edit the kubelet service arguments file /var/snap/microk8s/current/args/kubelet and set the parameter:
          --event-qps=0
        scored: false

      - id: 4.2.10
        text: "Ensure that the --tls-cert-file and --tls-private-key-file arguments are set as appropriate (Manual)"
        audit: |
          grep -e '--tls-cert-file\|--tls-private-key-file' /var/snap/microk8s/current/args/kubelet
        audit_config: "/bin/cat $kubeletconf"
        tests:
          test_items:
            - flag: --tls-cert-file
              path: '{.tlsCertFile}'
            - flag: --tls-private-key-file
              path: '{.tlsPrivateKeyFile}'
        remediation: |
          Edit the kubelet service arguments file /var/snap/microk8s/current/args/kubelet and set the parameters:
          --tls-cert-file=${SNAP_DATA}/certs/kubelet.crt
          --tls-private-key-file=${SNAP_DATA}/certs/kubelet.key
        scored: false

      - id: 4.2.11
        text: "Ensure that the --rotate-certificates argument is not set to false (Automated)"
        audit: "grep -e '--rotate-certificates' /var/snap/microk8s/current/args/kubelet ; echo $?"
        audit_config: "/bin/cat $kubeletconf"
        tests:
          test_items:
            - flag: --rotate-certificates
              path: '{.rotateCertificates}'
              compare:
                op: eq
                value: true
            - flag: --rotate-certificates
              path: '{.rotateCertificates}'
              set: false
          bin_op: or
        remediation: |
          Edit the kubelet service arguments file /var/snap/microk8s/current/args/kubelet and remove the parameter --rotate-certificates.
        scored: true

      - id: 4.2.12
        text: "Verify that the RotateKubeletServerCertificate argument is set to true (Manual)"
        audit: "grep -e 'RotateKubeletServerCertificate' /var/snap/microk8s/current/args/kubelet ; echo $?"
        audit_config: "/bin/cat $kubeletconf"
        tests:
          bin_op: or
          test_items:
            - flag: RotateKubeletServerCertificate
              path: '{.featureGates.RotateKubeletServerCertificate}'
              compare:
                op: nothave
                value: false
            - flag: RotateKubeletServerCertificate
              path: '{.featureGates.RotateKubeletServerCertificate}'
              set: false
        remediation: |
          Edit the kubelet service arguments file /var/snap/microk8s/current/args/kubelet and 
          remove the feature gate RotateKubeletServerCertificate as it is set to true by default.
        scored: false

      - id: 4.2.13
        text: "Ensure that the Kubelet only makes use of Strong Cryptographic Ciphers (Manual)"
        audit: "grep -e '--tls-cipher-suites' /var/snap/microk8s/current/args/kubelet"
        audit_config: "/bin/cat $kubeletconf"
        tests:
          test_items:
            - flag: --tls-cipher-suites
              path: '{range .tlsCipherSuites[:]}{}{'',''}{end}'
              compare:
                op: valid_elements
                value: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256
        remediation: |
          Edit the kubelet arguments file /var/snap/microk8s/current/args/kubelet and set the below parameter.
          --tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,
          TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,
          TLS_RSA_WITH_AES_128_GCM_SHA256
        scored: false
